@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
@inject ITelegramService TelegramService


@if (chatModel == null)
{
}
else
{
    <div class="companion_block ">
        <div class="companion_img">
            <div class="companion_picture">
                <img src="@chatModel.PartnerAvatar">
            </div>
        </div>
        <div class="name_and_last_block">
            <div class="name_companion">
                @chatModel.PartnerName @chatModel.PartnerLastName
            </div>
            <div class="last_online">
                last online
            </div>
        </div>
        <div class="up_button_block">
            <button class="up_button_block_first"></button>
            <button class="up_button_block_second"></button>
            <button class="up_button_block_third"></button>
            <button class="up_button_block_fourth"></button>
            <button class="up_button_block_fifth" @onclick="ShowOrHideRightTab"></button>
        </div>
    </div>
    <div class="block_correspondence @correspondenceMiniCssClass" id="block_message">
        @* <div class="data_correspondence">
            22 april 2022
            </div>*@
        @foreach (var item in chatModel.Messages)
        {
            <div class="data_correspondence">
                @Datetime.GetDateChat(item.CreateAt)
            </div>

            <div class="@(item.IsPartner?"sender_message":"sender_message_right")">
                <div class="img_sender_message">
                    <div class="picture_sender_message">
                        <img src="@chatModel.PartnerAvatar">
                    </div>
                </div>
                <div class="text_block_sender">
                    <p>@item.Text</p>
                </div>
            </div>
        }
    </div>
    <div class="dropdown_block @helpWordCssClass">
        <div class="fast_answersx_block">
            <p> Fast answers: (Choose category)</p>
            <div @onclick="ShowHelpWord"></div>
        </div>
        <div class="input_fast_anwers">
            <input type="text" />
        </div>
        <div class="fast_anwers_button">
            @for (var i = 0; i < 50; i++)
            {
                <button></button>
            }
        </div>
    </div>
    <div class="dialing_sms">
        <div class="dialing_sms_input">
            <textarea @bind="@TextMessage" type="text" placeholder="Press CTRL + Enter to send"></textarea>
        </div>
        <div class="sticer_button_block">
            <div class="sticer_block">
                <label for="fileinput" class="label-wrapper">
                    <span></span>
                    <InputFile id="fileinput" class="custom-input-hide" OnChange="@LoadFiles" multiple />
                </label>
                <button @onclick="ShowHelpWord" class="button_helpworld"></button>
                <button class="button_smile"></button>
            </div>
            <div class="send_button">
                <button @onclick="SendMessage">
                    <img src="/Images/icons/arrow-up.svg" />
                    send
                </button>
            </div>
        </div>
    </div>

    <style>
        .custom-input-hide {
            width: 0;
            height: 0;
            overflow: hidden;
        }
    </style>
}

@code {
    [Parameter]
    public string token { get; set; }

    [Parameter]
    public Chat chatModel { get; set; }

    [Parameter]
    public EventCallback ShowOrHideRightCallback { get; set; }

    private string TextMessage { get; set; }
    HubConnection? hubConnection;

    private bool showHelpWord = false;
    private string? correspondenceMiniCssClass => showHelpWord ? "block_correspondence_mini" : null;
    private string? helpWordCssClass => showHelpWord ? null : "dropdown_block_hide";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
       .WithUrl(_navigationManager.ToAbsoluteUri("/signalRHub"))
       .Build();
        hubConnection.On<MessageNotification>("Send", this.Send);
        await hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) { }
        await ScrollToElementId("block_message");
    }

    async Task Send(MessageNotification message)
    {
        if (chatModel != null && chatModel.Id == message.Message.ChatId && message.Token == token)
        {
            chatModel.Messages.Add(message.Message);
            await ScrollToElementId("block_message");
            StateHasChanged();
        }
    }

    private void SendMessage()
    {
        TelegramService.SendMessage(chatModel.Id, TextMessage, token);
        TextMessage = String.Empty;
    }

    public async Task ScrollToElementId(string elementId)
    {
        await JSRuntime.InvokeVoidAsync("scrollToElementId", elementId);
    }

    private void ShowOrHideRightTab()
    {
        ShowOrHideRightCallback.InvokeAsync();
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {

        }
    }

    private void ShowHelpWord()
    {
        showHelpWord = !showHelpWord;
    }
}
