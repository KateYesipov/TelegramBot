@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
@inject ITelegramService TelegramService


@if (chatModel == null)
{
}
else
{
    <div class="companion_block ">
        <div class="companion_img">
            <div class="companion_picture">
                <img src="@chatModel.PartnerAvatar">
            </div>
        </div>
        <div class="name_and_last_block">
            <div class="name_companion">
                @chatModel.PartnerName @chatModel.PartnerLastName
            </div>
            <div class="last_online">
                last online
            </div>
        </div>
        <div class="up_button_block">
            <button class="up_button_block_first"></button>
            <button class="up_button_block_second"></button>
            <button class="up_button_block_third"></button>
            <button class="up_button_block_fourth"></button>
            <button class="up_button_block_fifth" @onclick="ShowOrHideRightTab"></button>
        </div>
    </div>
    <div class="dropdown_block_ontop">
        <p>@chatModel.PartnerName speaks <a href="#">English</a>, is that correct? </p>
        <div></div>
    </div>
    <div class="block_correspondence @correspondenceMiniCssClass @(imageDataUrls.Count()>0?"block_correspondence_attachement":"")" id="block_message">
        @foreach (var item in chatModel.Messages)
        {
            <div class="data_correspondence">
                @Datetime.GetDateChat(item.CreateAt)
            </div>
            @if (item.Type == "Text")
            {
                <div class="@(item.IsPartner?"sender_message":"sender_message_right")">

                    <div class="img_sender_message">
                        <div class="picture_sender_message">
                            <img src="@(item.IsPartner?chatModel.PartnerAvatar:chatModel.BotAvatar)">
                        </div>
                    </div>
                    <div class="text_block_sender">
                        <p>@item.Text</p>
                    </div>
                    <div class="message_hover_block message_hover_block_none ">
                        <img src="/Images/icons/forwarding.svg" />
                        <img src="/Images/icons/additionally.svg" />
                        <img src="/Images/icons/translation.svg" />
                    </div>

                </div>
                <div class="@(item.IsPartner?"time_correspondence_left":"time_correspondence_right")">
                    @item.CreateAt.ToString("HH:mm")
                </div>
            }
            @if (item.Type == "Photo")
            {
                <div class="@(item.IsPartner?"sender_message":"sender_message_right")">

                    <div class="img_sender_message">
                        <div class="picture_sender_message">
                            <img src="@(item.IsPartner?chatModel.PartnerAvatar:chatModel.BotAvatar)">
                        </div>
                    </div>

                    <div class="ImageBlock">
                        <ImageBlock ImageList="@(item.Attachments.Take(5).ToList())"></ImageBlock>
                    </div>
                    <div class=" message_picture message_picture_none ">
                        <img src="/Images/icons/forwarding.svg" />
                        <img src="/Images/icons/additionally.svg" />
                        <img src="/Images/icons/translation.svg" />
                    </div>
                </div>
                <div class="@(item.IsPartner?"time_correspondence_left":"time_correspondence_right")">
                    @item.CreateAt.ToString("HH:mm")
                </div>
            }
        }
    </div>
    <div class="dropdown_block @helpWordCssClass">
        <div class="fast_answersx_block">
            <p> Fast answers: (Choose category)</p>
            <div @onclick="ShowHelpWord"></div>
        </div>
        <div class="input_fast_anwers">
            <input type="text" />
        </div>
        <div class="fast_anwers_button">
            @for (var i = 0; i < 50; i++)
            {
                <button></button>
            }
        </div>
    </div>
    @if (imageDataUrls.Count() > 0)
    {
        <div class="inserted_pictures ">
            @foreach (var item in imageDataUrls)
            {
                <div>
                    <button class="button_close_img button_close_img_none ">
                        <img src="/Images/icons/close_img.svg" />
                    </button>
                    <img src="@item" />
                </div>
            }
        </div>
    }
    <div class="dialing_sms">

        <div class="dialing_sms_input">
            <textarea @bind="@TextMessage" type="text" placeholder="Press CTRL + Enter to send"></textarea>
        </div>
        <div class="sticer_button_block">
            <div class="sticer_block">
                <label for="fileinput" class="label-wrapper">
                    <span></span>
                    <InputFile id="fileinput" class="custom-input-hide" OnChange="@LoadFiles" multiple accept=".png,.jpg" />
                </label>
                <button @onclick="ShowHelpWord" class="button_helpworld"></button>
                <button class="button_smile"></button>
            </div>
            <div class="send_button">
                <button @onclick="@(async () => await SendMessage())">
                    <img src="/Images/icons/arrow-up.svg" />
                    send
                </button>
            </div>
        </div>
    </div>

    <style>
        .custom-input-hide {
            width: 0;
            height: 0;
            overflow: hidden;
        }
    </style>
}

@code {
    [Parameter]
    public string token { get; set; }

    [Parameter]
    public Chat chatModel { get; set; }

    [Parameter]
    public EventCallback ShowOrHideRightCallback { get; set; }


    public List<Attachment> Attachments = new List<Attachment>();
    private IList<string> imageDataUrls = new List<string>();

    private string TextMessage { get; set; }
    HubConnection? hubConnection;

    private bool showHelpWord = false;

    private string? correspondenceMiniCssClass => showHelpWord ? "block_correspondence_mini" : null;
    private string? helpWordCssClass => showHelpWord ? null : "dropdown_block_hide";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
       .WithUrl(_navigationManager.ToAbsoluteUri("/signalRHub"))
       .Build();
        hubConnection.On<ChatNotification>("Send", this.Send);
        await hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) { }
        await Task.Delay(100);
        await ScrollToElementId("block_message");
    }

    async Task Send(ChatNotification message)
    {
        if (chatModel != null && chatModel.Id == message.Message.ChatId && message.Token == token)
        {
            Message oldMessage = null;
            var messageGroupId = message.Message.MessageGroupId;
            if (messageGroupId != 0)
            {
                oldMessage = chatModel.Messages.FirstOrDefault(x => x.MessageGroupId == messageGroupId);
            }


            if (oldMessage == null)
            {
                var newMessage = new Message
                    {
                        Text = message.Message.Text,
                        MessageGroupId = message.Message.MessageGroupId,
                        IsPartner = message.Message.IsPartner,
                        CreateAt = message.Message.CreateAt,
                        Type = message.Message.Type,
                        Attachments = new List<Attachment>() { new Attachment
                                                             {FilePath = message.Message.FilePath,
                                                             Type = message.Message.Type}}
                    };
                chatModel.Messages.Add(newMessage);
            }
            else
            {
                oldMessage.Attachments.Add(new Attachment
                    {
                        FilePath = message.Message.FilePath,
                        Type = message.Message.Type
                    });
            }
            await ScrollToElementId("block_message");
            StateHasChanged();
        }
    }

    private async Task SendMessage()
    {
        var newSendmessage = new SendMessage
            {
                ChatId = chatModel.Id,
                TelegramChatId = chatModel.TelegramChatId,
                TextMessage = TextMessage,
                Token = token,
                Type=Attachments.Count()>0?"Photo":"Text",
                Attachments = Attachments
            };

        await TelegramService.SendMessage(newSendmessage);
        TextMessage = String.Empty;
        imageDataUrls.Clear();
        Attachments.Clear();
    }

    public async Task ScrollToElementId(string elementId)
    {
        await JSRuntime.InvokeVoidAsync("scrollToElementId", elementId);
    }

    private void ShowOrHideRightTab()
    {
        ShowOrHideRightCallback.InvokeAsync();
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var imageFile in e.GetMultipleFiles())
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format, 400, 400);
            var buffer = new byte[resizedImageFile.Size];
            await imageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageDataUrls.Add(imageDataUrl);

            var fileName = imageFile.Name;
            var typeFile = imageFile.ContentType;
            MemoryStream stream = new MemoryStream(buffer);

            Attachments.Add(new Attachment { Stream = stream, FileName = fileName, Type = "Photo" });
            StateHasChanged();
        }
    }

    private void ShowHelpWord()
    {
        showHelpWord = !showHelpWord;
    }
  }