@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
@inject ICategoryAnswerService CategoryAnswerService
@inject IAnswerService AnswerService
@inject ITelegramService TelegramService
@inject IDeepService DeepService
@inject IMessageRepository MessageRepository
@inject IAppSettingsService AppSettingsService
@inject HttpClient HttpClient

<div class="companion_block ">
    <div class="companion_img">
        @if (chatModel?.User!=null)
        {
            <AvatarBlock PathImg="@chatModel.User.AvatarPath" Color="@chatModel.User.ColorAvatar" Name="@chatModel.User.FirstName" />
        }
    </div>
    <div class="name_and_last_block">
        <div class="name_companion">
            @chatModel?.User.FirstName @chatModel?.User.LastName
        </div>
        @if (chatModel != null)
        {
            <div class="last_online">
                last online at @(chatModel.Messages.LastOrDefault().CreateAt.ToString("HH:mm"))
            </div>
        }
    </div>
    <div class="up_button_block">
        <button class="up_button_block_first"></button>
        <button class="up_button_block_second"></button>
        <button class="up_button_block_third"></button>
        <button class="up_button_block_fourth"></button>
        <button class="up_button_block_fifth" @onclick="ShowOrHideRightTab"></button>
    </div>
</div>
@if (chatModel != null)
{
    @if (showLanguagePanel)
    {
        <SelectLanguage ChatModel="chatModel" languageCallback="language=>Language=language" OnClickCallback="CloseLanguagePanel"></SelectLanguage>
    }
    <div class="block_correspondence @correspondenceMiniCssClass @(Attachments.Count()>0?"block_correspondence_attachement":"") @(showLanguagePanel?"":"block_correspondence_language_hide")" id="block_message">
        @foreach (var item in chatModel.Messages)
        {
            <div class="data_correspondence">
                @Datetime.GetDateChat(item.CreateAt)
            </div>
            @if (item.Type == "Text")
            {
                <div class="@(item.IsPartner && !item.IsRead?"sender_message_unread":"")" @onmouseover="@(async ()=> await ClickReadMessage(item))">
                    <div class="@(item.IsPartner?"sender_message":"sender_message_right")">
                        <div class="img_sender_message">
                                @if (item.IsPartner)
                                {
                                     <AvatarBlock PathImg="@chatModel.User.AvatarPath" Name="@chatModel.User.FirstName" Color="@chatModel.User.ColorAvatar" IsTelegramIcon="false" />
                                }
                                else
                                {  <div class="picture_sender_message">
                                     <img src="@chatModel.Bot.ImagePath">
                                   </div>
                                }
                        </div>
                        <div class="text_block_sender">
                            <p>@(item.IsTranslated?@item.TranslatedText:item.Text)</p>
                        </div>
                        <div class="message_hover_block message_hover_block_none ">
                            <img src="/Images/icons/forwarding.svg" />
                            <img src="/Images/icons/additionally.svg" @onclick="ShowEditMessageModal" />
                            <img src="/Images/icons/translation.svg" @onclick="@(async()=>await Translate(item))" />
                        </div>

                    </div>
                    <div class="@(item.IsPartner?"time_correspondence_left":"time_correspondence_right")">
                        @item.CreateAt.ToString("HH:mm")
                    </div>
                </div>
            }
            @if (item.Type == "Photo")
            {
                <div class="@(item.IsPartner?"sender_message":"sender_message_right")">

                    <div class="img_sender_message">
                        <div class="picture_sender_message">
                            <img src="@(item.IsPartner?chatModel.User.AvatarPath:chatModel.Bot.ImagePath)">
                        </div>
                    </div>

                    <div class="ImageBlock">
                        <ImageBlock ImageList="@(item.Attachments.Take(5).ToList())"></ImageBlock>
                    </div>
                    <div class=" message_picture message_picture_none ">
                        <img src="/Images/icons/forwarding.svg" />
                        <img src="/Images/icons/additionally.svg" />
                        <img src="/Images/icons/translation.svg" />
                    </div>
                </div>
                <div class="@(item.IsPartner?"time_correspondence_left":"time_correspondence_right")">
                    @item.CreateAt.ToString("HH:mm")
                </div>
            }
        }
    </div>
    @if (!showHelpWordAnswer)
    {
        <div class="dropdown_block @helpWordCategoryCssClass">
            <div class="fast_answersx_block">
                <p> Fast answers: (Choose category)</p>
                <div @onclick="ShowHelpWordCategory"></div>
            </div>
            <div class="input_fast_anwers">
                <input @bind-value="search_fast_answer" @bind-value:event="oninput" type="text" />
            </div>
            <div class="fast_anwers_button">
                @foreach (var item in FilteredCategory)
                {
                    <button @onclick="@(() => ShowFastAnswer(item.Id))">@item.Name</button>
                }
            </div>
        </div>
    }
    <div class="dropdown_block @helpWordAnswerCssClass">
        <div class="fast_answersx_block_two">
            <p>Fast answers: (Category Hello-bye) </p>
            <div @onclick="CloseHelpWordAnswer"></div>
        </div>

        <div class="fast_anwers_button_two">
            @foreach (var item in Answers)
            {
                <button @onclick="@(() =>InsertFastAnswer(item.FullAnswer))">
                    @item.ShortName
                    <div class="img_pencil_close">
                        <img @onmousedown="() =>ShowEditAnswerModal(item)" onclick="event.stopPropagation()" src="/Images/icons/pencil.svg">
                        <img @onmousedown="() =>RemoveAnswer(item.Id)" onclick="event.stopPropagation()" src="/Images/icons/close.svg" />
                    </div>
                </button>
            }
        </div>
    </div>
    @if (Attachments.Count() > 0)
    {
        <div class="inserted_pictures">
            @foreach (var item in Attachments)
            {
                @if (item.Type == "Photo")
                {
                    <div>
                        <button class="button_close_img button_close_img_none" @onclick="@(() => RemovePicture(item))">
                            <img src="/Images/icons/close_img.svg" />
                        </button>
                        <img src="@item.FilePath" />
                    </div>
                }
            }
        </div>
    }
}
<div class="dialing_sms">
    <div class="dialing_sms_input">
        <textarea @bind="@TextMessage" id="textMessage" type="text" placeholder="Press CTRL + Enter to send"></textarea>
    </div>
    <div class="sticer_button_block">
        <div class="sticer_block">
            <label for="fileinput" class="label-wrapper">
                <span></span>
                <InputFile id="fileinput" class="custom-input-hide" OnChange="@LoadFiles" multiple accept=".png,.jpg" />
            </label>
            <button @onclick="ShowHelpWordCategory" class="button_helpworld"></button>
            <button class="button_smile" id="emojiButton"></button>
        </div>
        <div class="send_button">
            <button @onclick="@(async () => await SendMessage())">
                <img src="/Images/icons/arrow-up.svg" />
                send
            </button>
        </div>
    </div>
</div>
<EditAnswer isShowModal="isEditAnswerShowModal" answer="editAnswer" OnClickCallback="CloseEditAnswerModal"></EditAnswer>
<EditMessage isShowModal="isEditMessageShowModal" Coord="coordMessageEdit" OnClickCallback="CloseEditMessageModal"></EditMessage>

<style>
    .custom-input-hide {
        width: 0;
        height: 0;
        overflow: hidden;
    }
</style>


@code {
    [Parameter]
    public string token { get; set; }

    [Parameter]
    public Chat chatModel { get; set; }

    [Parameter]
    public EventCallback ShowOrHideRightCallback { get; set; }

    public Language Language;

    //coord message edit
    public Coord coordMessageEdit = new Coord();

    //search
    public string search_fast_answer = String.Empty;

    public List<Attachment> Attachments = new List<Attachment>();
    private List<Category> CategoriesAnswer = new List<Category>();
    public List<Answer> Answers = new List<Answer>();

    private string TextMessage = String.Empty;
    HubConnection? hubConnection;

    private bool showHelpWordCategory = false;
    private bool showHelpWordAnswer = false;
    private bool showLanguagePanel = true;

    //moadal
    private bool isEditMessageShowModal = false;
    private bool isEditAnswerShowModal = false;
    private bool isSelectLanguageShowModal = false;

    //model editAnswer
    public Answer editAnswer = new Answer();

    private string? correspondenceMiniCssClass => showHelpWordCategory ? "block_correspondence_mini" : null;
    private string? helpWordCategoryCssClass => showHelpWordCategory ? null : "dropdown_block_hide";
    private string? helpWordAnswerCssClass => showHelpWordAnswer ? "" : "dropdown_block_hide";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
       .WithUrl(_navigationManager.ToAbsoluteUri("/signalRHub"))
       .Build();
        hubConnection.On<ChatNotification>("Send", this.Send);
        await hubConnection.StartAsync();

        CategoriesAnswer = CategoryAnswerService.GetAll();
    }

    List<Category> FilteredCategory => CategoriesAnswer.Where(i => i.Name.ToLower().Contains(search_fast_answer.ToLower())).ToList();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("jsMethod");
            await JSRuntime.InvokeVoidAsync("autoHeightTextarea");
        }
        await Task.Delay(100);
        await ScrollToElementId("block_message");
    }

    protected async Task Send(ChatNotification chatNotification)
    {
        if (chatModel != null && chatModel.Id == chatNotification.Message.ChatId && chatNotification.Token == token)
        {
            Message oldMessage = null;
            var messageGroupId = chatNotification.Message.MessageGroupId;
            if (messageGroupId != 0)
            {
                oldMessage = chatModel.Messages.FirstOrDefault(x => x.MessageGroupId == messageGroupId);
            }

            if (oldMessage == null)
            {
                Attachment newAttachment = null;
                if (chatNotification.Message.FilePath != null)
                {
                    newAttachment = new Attachment
                        {
                            FilePath = chatNotification.Message.FilePath,
                            Type = chatNotification.Message.Type
                        };
                }

                var newMessage = new Message
                    {
                        Id = chatNotification.Message.Id,
                        Text = chatNotification.Message.Text,
                        MessageGroupId = chatNotification.Message.MessageGroupId,
                        IsPartner = chatNotification.Message.IsPartner,
                        CreateAt = chatNotification.Message.CreateAt,
                        ChatId = chatNotification.ChatId,
                        Type = chatNotification.Message.Type,
                        Attachments = new List<Attachment>() { newAttachment }
                    };
                chatModel.Messages.Add(newMessage);
            }
            else
            {
                oldMessage.Attachments.Add(new Attachment
                    {
                        FilePath = chatNotification.Message.FilePath,
                        Type = chatNotification.Message.Type
                    });
                chatModel.Messages.Add(oldMessage);
            }
            await ScrollToElementId("block_message");
            StateHasChanged();
        }
    }

    private async Task SendMessage()
    {
        if (!String.IsNullOrWhiteSpace(TextMessage) || Attachments.Count() > 0)
        {
            var newSendmessage = new SendMessage
                {
                    ChatId = chatModel.Id,
                    TelegramChatId = chatModel.TelegramChatId,
                    TextMessage = TextMessage,
                    Token = token,
                    Type = Attachments.Count() > 0 ? "Photo" : "Text",
                    Attachments = Attachments
                };

            await TelegramService.SendMessage(newSendmessage);
            TextMessage = String.Empty;
            Attachments.Clear();
        }
    }

    private async Task ScrollToElementId(string elementId)
    {
        await JSRuntime.InvokeVoidAsync("scrollToElementId", elementId);
    }

    private void ShowOrHideRightTab()
    {
        ShowOrHideRightCallback.InvokeAsync();
    }

    private void ShowFastAnswer(long categoryId)
    {
        Answers = AnswerService.GetByCategoryId(categoryId);
        showHelpWordAnswer = true;
    }

    private async Task ClickReadMessage(Message item)
    {
        if (item.IsPartner && !item.IsRead)
        {
            try
            {
                await HttpClient.PostAsJsonAsync(AppSettingsService.TelegramChatBlazorSettings.ApiUrl + "api/ApiMessage/ReadMessage", item);
                item.IsRead = true;
            }
            catch (Exception ex)
            {

            }
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var imageFile in e.GetMultipleFiles())
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format, 400, 400);
            var buffer = new byte[resizedImageFile.Size];
            await imageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            var fileName = imageFile.Name;
            var typeFile = imageFile.ContentType;
            MemoryStream stream = new MemoryStream(buffer);

            Attachments.Add(new Attachment { FilePath = imageDataUrl, Stream = stream, FileName = fileName, Type = "Photo" });
            StateHasChanged();
        }
    }

    private async Task Translate(Message item)
    {
        var langCode = Language?.languageCode ?? chatModel.User.languageCode;
        item.TranslatedText = await DeepService.Translate(item.Text, langCode);
        item.IsTranslated = !item.IsTranslated;
    }

    private void InsertFastAnswer(string value)
    {
        TextMessage = TextMessage + value;
    }

    private void RemovePicture(Attachment item)
    {
        Attachments.Remove(item);
    }

    private void CloseLanguagePanel()
    {
        showLanguagePanel = false;
    }

    private void ShowHelpWordCategory()
    {
        showHelpWordCategory = !showHelpWordCategory;
    }

    private void CloseHelpWordAnswer()
    {
        showHelpWordAnswer = false;
    }

    //modal
    public void ShowEditMessageModal(MouseEventArgs e)
    {
        coordMessageEdit.X = (e.ClientX - 500);
        coordMessageEdit.Y = e.ClientY;
        isEditMessageShowModal = true;
    }

    public void CloseEditMessageModal()
    {
        isEditMessageShowModal = false;
    }

    public void RemoveAnswer(long Id)
    {
        var answer = Answers.FirstOrDefault(x => x.Id == Id);
        if (answer != null)
        {
            AnswerService.DeleteById(answer.Id);
            Answers.Remove(answer);
            StateHasChanged();
        }
    }

    public void ShowEditAnswerModal(Answer item)
    {
        editAnswer = item;
        isEditAnswerShowModal = true;
    }

    public void CloseEditAnswerModal()
    {
        isEditAnswerShowModal = false;
    }
  }