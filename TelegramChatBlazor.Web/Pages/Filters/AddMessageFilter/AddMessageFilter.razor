@inject IColorService colorService
@inject IBotService BotService
@inject IFilterService FilterService

@if (Colors == null)
{
}
else
{
    <div class="popup @(isShowModal?"":"popup_none")">
        <div class="popup_body">
            <div class="popup_content">
                <a @onclick="CloseModal" class="popup_close">
                    <img src="/Images/icons/close.svg">
                </a>
                <div class="add_messaging"> Add messaging filter</div>
                <div class="fill_all">Fill all the fields below to make a transaction </div>
                <div class="fliter_name">
                    <p>Filter name </p>
                    <input type="text" @bind="Filter.Name" placeholder="Deposit" />
                </div>
                <div class="icon_colors_block">
                    <p>Icon color </p>
                    <div class="color_block">
                        <ul>
                            @foreach (var item in Colors)
                            {
                                <li style="background:@item.ColorHex"></li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="message_status_block">
                    <div class="select_block">
                        <div>
                            <p> Message status</p>
                            <select @bind="Filter.Readed">
                                <option value="null">All</option>
                                <option value="true">Read</option>
                                <option value="false">Unread</option>
                            </select>
                        </div>
                        <div>
                            <p>Chat status</p>
                            <select @bind="Filter.Archived">
                                <option value="null">All</option>
                                <option value="true">Archived</option>
                                <option value="false">Not Archived</option>
                            </select>
                        </div>
                    </div>
                    <div class="select_block">
                        <div>
                            <p>Mailing list status </p>
                            <select @bind="Filter.Mailing">
                                <option value="null">All</option>
                                <option value="true">Yes</option>
                                <option value=false>No</option>
                            </select>
                        </div>
                        <div>
                            <p> Bot messages</p>
                            <select>
                                <option>All</option>
                                @foreach (var item in Bots)
                                {
                                    <option>@item.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="continue_button">
                    <button @onclick="@(()=>Create())">Continue </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool isShowModal { get; set; }

    [Parameter]
    public EventCallback OnClickCallback { get; set; }

    private Filter Filter = new Filter();
    private List<Color> Colors;
    private Color SelectedColor;
    private List<Domain.Models.Bot> Bots = new List<Bot>();

    protected override async Task OnParametersSetAsync()
    {
        if (isShowModal)
        {
            Colors = colorService.GetColors();
            Bots = await Task.Run(() => BotService.GetAll());
        }
    }

    public void Create()
    {
        FilterService.Create(Filter);
    }

    public void CloseModal()
    {
        OnClickCallback.InvokeAsync();
    }

    public void СhooseColor(Color item)
    {
        SelectedColor = item;
    }
}
