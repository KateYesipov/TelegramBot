@page "/filter"
@inject IJSRuntime JsRuntime
@inject IFilterService FilterService

<div class="background_category">
    <a class="btn btn-primary add_new" href="filter/add">
        <span class="oi oi-plus" aria-hidden="true">Add New</span>
    </a>

    <h1>Filter Info</h1>
    @if (filters is null)
    {
        <p><em>Loading... !</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Filter Id</th>
                    <th>Name</th>
                    <th>ColorHex</th>
                    <th>Readed</th>
                    <th>Archived</th>
                    <th>Mailing</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in filters)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>@item.ColorHex</td>
                        <td>@item.Readed</td>
                        <td>@item.Archived</td>
                        <td>@item.Mailing</td>
                        <td class="links_block">
                            <a class="btn btn-warning" href="filter/edit/@item.Id">
                                <span class="oi oi-pencil" aria-hidden="true">Edit</span>
                            </a>
                            <a class="btn btn-danger" onclick="@(async () => await Delete(item.Id))">
                                <span class="oi oi-trash" aria-hidden="true">Delete</span>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    List<Filter> filters;
    protected override async Task OnInitializedAsync()
    {
        filters = await Task.Run(() => FilterService.GetAll());
    }

    private async Task Delete(long Id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            FilterService.DeleteById(Id);
            filters = await Task.Run(() => FilterService.GetAll());
            StateHasChanged();
        }
    }
}