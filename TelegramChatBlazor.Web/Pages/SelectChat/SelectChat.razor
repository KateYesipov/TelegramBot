@using TelegramChatBlazor.Domain.Models.SignalR
@using System.Linq
@inject NavigationManager _navigationManager
@inject ITelegramService TelegramService
@inject IBotService BotService


@if (Chats != null)
{
    <div>
        <div class="search_by_name nosubmit">
            <input @bind="searchValue" @bind:event="oninput" class="icon_input nosubmit" type="search" placeholder="Search by name" />
        </div>
        <div class="buttons_block">
            <button class="add_button">+</button>
            <button>All</button>
            <button style="background: #FFCE31;"> Something</button>
            <button>Something</button>
            <button>Something</button>
            <button>Something</button>
        </div>
    </div>
    <div>
        <div class="text_messages">
            Messages
        </div>
        <div class="chats_content">
            @foreach (var item in Chats)
            {
                var lastMessage = item.Messages.LastOrDefault();
                if (lastMessage != null)
                {
                    <div class="messange_block" @onclick="(()=>LoadMessageById(item.Id))">
                        <div class="avatar">
                            <div class="img_messange">
                                <img src="@item.PartnerAvatar">
                            </div>
                        </div>
                        <div class="sender_name">
                            @item.PartnerName
                        </div>
                        <div class="sms_content">
                            @lastMessage.Text
                        </div>
                    </div>
                }
            }
        </div>
        <div class="lower_block">
            @foreach (var item in Chats)
            {
                <div class="lower_block_img" @onclick="(()=>LoadMessageById(item.Id))">
                    <img src="@item.PartnerAvatar" />
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<long> OnClickCallback { get; set; }

    [Parameter]
    public string token { get; set; }

    HubConnection? hubConnection;
    public List<Domain.Models.Chat> Chats { get; set; } = new List<Domain.Models.Chat>();

    public  string searchValue = string.Empty;
    private int TimesClicked { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
       .WithUrl(_navigationManager.ToAbsoluteUri("/signalRHub"))
       .Build();
        hubConnection.On<MessageNotification>("Send", this.Send);
        await hubConnection.StartAsync();

        var botId = BotService.GetByToken(token);
        Chats = TelegramService.GetChatListByBotId(botId.Id);
    }

    List<Domain.Models.Chat> ChatsFilter = Chats.Where(i => i.PartnerName.ToLower().Contains(searchValue.ToLower())).ToList();

    Task Send(MessageNotification messageNotification)
    {
        if (messageNotification.Token == token)
        {
            var index = Chats.FindIndex(m => m.Id == messageNotification.Message.ChatId);
            if (index == -1)
            {
                var newChat = new Chat
                    {
                        Id = messageNotification.Message.ChatId,
                        PartnerName = messageNotification.PartnerName,
                        PartnerAvatar = messageNotification.PartnerAvatar,
                        Messages = new List<Message> { messageNotification.Message }
                    };
                Chats.Add(newChat);
            }
            else
            {
                Chats[index].Messages.Add(messageNotification.Message);
            }
        }
        StateHasChanged();

        return Task.CompletedTask;
    }

    private void UpdateTimesClicked()
    {
        TimesClicked++;
    }

    public void LoadMessageById(long Id)
    {
        OnClickCallback.InvokeAsync(Id);
    }
}

