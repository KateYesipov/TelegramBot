@using TelegramChatBlazor.Domain.Models.SignalR
@inject NavigationManager _navigationManager
@inject ITelegramService TelegramService

@if (Chats != null)
{
    <div>
        <div class="search_by_name nosubmit">
            <input class="icon_input nosubmit" type="search" placeholder="Search by name" />
        </div>
        <div class="buttons_block">
            <button class="add_button">+</button >
            <button>All</button>
            <button style="background: #FFCE31;"> Something</button>
            <button>Something</button>
            <button>Something</button>
            <button>Something</button>
        </div>
    </div>
    <div>
        <div class="text_messages">
            Messages
        </div>
        <div class="chats_content">
            @foreach (var item in Chats)
            {
                @for (var i = 0; i < 10; i++)
                {

                var lastMessage = item.Messages.LastOrDefault();
                if (lastMessage != null)
                {
                    <div class="messange_block" @onclick="(()=>LoadMessageById(item.Id))">
                        <div class="avatar">
                            <div class="img_messange">
                                <img src="@item.PartnerAvatar">
                            </div>
                        </div>
                        <div class="sender_name">
                            @item.PartnerName
                        </div>
                        <div class="sms_content">
                            @lastMessage.Text
                        </div>
                    </div>
                }
                }
            }
        </div>
        @if (Chats.Count() > 0)
        {
            <div class="lower_block">
                @for (var i = 0; i < 20;i++)
                {
                    <div class="lower_block_img">
                        <img src="@Chats[1].PartnerAvatar" />
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public EventCallback<long> OnClickCallback { get; set; }

    HubConnection? hubConnection;
    private List<Domain.Models.Chat> Chats = new List<Domain.Models.Chat>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
       .WithUrl(_navigationManager.ToAbsoluteUri("/signalRHub"))
       .Build();
        hubConnection.On<MessageNotification>("Send", this.Send);
        await hubConnection.StartAsync();

        Chats = TelegramService.GetChats();
    }

    Task Send(MessageNotification messageNotification)
    {
        var index = Chats.FindIndex(m => m.Id == messageNotification.Message.ChatId);
        if (index == -1)
        {
            var newChat = new Chat
                {
                    Id = messageNotification.Message.ChatId,
                    PartnerName = messageNotification.PartnerName,
                    PartnerAvatar = messageNotification.PartnerAvatar,
                    Messages = new List<Message> { messageNotification.Message }
                };
            Chats.Add(newChat);
        }
        else
        {
            Chats[index].Messages.Add(messageNotification.Message);
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    public void LoadMessageById(long Id)
    {
        OnClickCallback.InvokeAsync(Id);
    }
}

